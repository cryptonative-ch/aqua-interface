/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface GnosisSafeInterface extends ethers.utils.Interface {
  functions: {
    'NAME()': FunctionFragment
    'VERSION()': FunctionFragment
    'addOwnerWithThreshold(address,uint256)': FunctionFragment
    'approveHash(bytes32)': FunctionFragment
    'approvedHashes(address,bytes32)': FunctionFragment
    'changeMasterCopy(address)': FunctionFragment
    'changeThreshold(uint256)': FunctionFragment
    'disableModule(address,address)': FunctionFragment
    'domainSeparator()': FunctionFragment
    'enableModule(address)': FunctionFragment
    'encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)': FunctionFragment
    'execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)': FunctionFragment
    'execTransactionFromModule(address,uint256,bytes,uint8)': FunctionFragment
    'execTransactionFromModuleReturnData(address,uint256,bytes,uint8)': FunctionFragment
    'getMessageHash(bytes)': FunctionFragment
    'getModules()': FunctionFragment
    'getModulesPaginated(address,uint256)': FunctionFragment
    'getOwners()': FunctionFragment
    'getThreshold()': FunctionFragment
    'getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)': FunctionFragment
    'isModuleEnabled(address)': FunctionFragment
    'isOwner(address)': FunctionFragment
    'isValidSignature(bytes,bytes)': FunctionFragment
    'nonce()': FunctionFragment
    'removeOwner(address,address,uint256)': FunctionFragment
    'requiredTxGas(address,uint256,bytes,uint8)': FunctionFragment
    'setFallbackHandler(address)': FunctionFragment
    'setup(address[],uint256,address,bytes,address,address,uint256,address)': FunctionFragment
    'signMessage(bytes)': FunctionFragment
    'signedMessages(bytes32)': FunctionFragment
    'swapOwner(address,address,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'NAME', values?: undefined): string
  encodeFunctionData(functionFragment: 'VERSION', values?: undefined): string
  encodeFunctionData(functionFragment: 'addOwnerWithThreshold', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'approveHash', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'approvedHashes', values: [string, BytesLike]): string
  encodeFunctionData(functionFragment: 'changeMasterCopy', values: [string]): string
  encodeFunctionData(functionFragment: 'changeThreshold', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'disableModule', values: [string, string]): string
  encodeFunctionData(functionFragment: 'domainSeparator', values?: undefined): string
  encodeFunctionData(functionFragment: 'enableModule', values: [string]): string
  encodeFunctionData(
    functionFragment: 'encodeTransactionData',
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'execTransaction',
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'execTransactionFromModule',
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'execTransactionFromModuleReturnData',
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'getMessageHash', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'getModules', values?: undefined): string
  encodeFunctionData(functionFragment: 'getModulesPaginated', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getOwners', values?: undefined): string
  encodeFunctionData(functionFragment: 'getThreshold', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getTransactionHash',
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string
  encodeFunctionData(functionFragment: 'isModuleEnabled', values: [string]): string
  encodeFunctionData(functionFragment: 'isOwner', values: [string]): string
  encodeFunctionData(functionFragment: 'isValidSignature', values: [BytesLike, BytesLike]): string
  encodeFunctionData(functionFragment: 'nonce', values?: undefined): string
  encodeFunctionData(functionFragment: 'removeOwner', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'requiredTxGas', values: [string, BigNumberish, BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'setFallbackHandler', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setup',
    values: [string[], BigNumberish, string, BytesLike, string, string, BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: 'signMessage', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'signedMessages', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'swapOwner', values: [string, string, string]): string

  decodeFunctionResult(functionFragment: 'NAME', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'VERSION', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addOwnerWithThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approveHash', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approvedHashes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeMasterCopy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'changeThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'disableModule', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'domainSeparator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'enableModule', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'encodeTransactionData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execTransaction', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execTransactionFromModule', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'execTransactionFromModuleReturnData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getMessageHash', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getModules', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getModulesPaginated', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getOwners', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getThreshold', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getTransactionHash', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isModuleEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isValidSignature', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nonce', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'requiredTxGas', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setFallbackHandler', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setup', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'signMessage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'signedMessages', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swapOwner', data: BytesLike): Result

  events: {
    'AddedOwner(address)': EventFragment
    'ApproveHash(bytes32,address)': EventFragment
    'ChangedMasterCopy(address)': EventFragment
    'ChangedThreshold(uint256)': EventFragment
    'DisabledModule(address)': EventFragment
    'EnabledModule(address)': EventFragment
    'ExecutionFailure(bytes32,uint256)': EventFragment
    'ExecutionFromModuleFailure(address)': EventFragment
    'ExecutionFromModuleSuccess(address)': EventFragment
    'ExecutionSuccess(bytes32,uint256)': EventFragment
    'RemovedOwner(address)': EventFragment
    'SignMsg(bytes32)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AddedOwner'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApproveHash'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangedMasterCopy'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ChangedThreshold'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DisabledModule'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EnabledModule'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ExecutionFailure'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ExecutionFromModuleFailure'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ExecutionFromModuleSuccess'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ExecutionSuccess'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RemovedOwner'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SignMsg'): EventFragment
}

export class GnosisSafe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: GnosisSafeInterface

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>

    'NAME()'(overrides?: CallOverrides): Promise<[string]>

    VERSION(overrides?: CallOverrides): Promise<[string]>

    'VERSION()'(overrides?: CallOverrides): Promise<[string]>

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'addOwnerWithThreshold(address,uint256)'(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'approveHash(bytes32)'(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    approvedHashes(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    'approvedHashes(address,bytes32)'(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'changeMasterCopy(address)'(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'changeThreshold(uint256)'(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'disableModule(address,address)'(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<[string]>

    'domainSeparator()'(overrides?: CallOverrides): Promise<[string]>

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'enableModule(address)'(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'execTransactionFromModule(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'execTransactionFromModuleReturnData(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getMessageHash(message: BytesLike, overrides?: CallOverrides): Promise<[string]>

    'getMessageHash(bytes)'(message: BytesLike, overrides?: CallOverrides): Promise<[string]>

    getModules(overrides?: CallOverrides): Promise<[string[]]>

    'getModules()'(overrides?: CallOverrides): Promise<[string[]]>

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>

    'getModulesPaginated(address,uint256)'(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>

    getOwners(overrides?: CallOverrides): Promise<[string[]]>

    'getOwners()'(overrides?: CallOverrides): Promise<[string[]]>

    getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>

    'getThreshold()'(overrides?: CallOverrides): Promise<[BigNumber]>

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    'getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>

    isModuleEnabled(module: string, overrides?: CallOverrides): Promise<[boolean]>

    'isModuleEnabled(address)'(module: string, overrides?: CallOverrides): Promise<[boolean]>

    isOwner(owner: string, overrides?: CallOverrides): Promise<[boolean]>

    'isOwner(address)'(owner: string, overrides?: CallOverrides): Promise<[boolean]>

    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'isValidSignature(bytes,bytes)'(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>

    'nonce()'(overrides?: CallOverrides): Promise<[BigNumber]>

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'removeOwner(address,address,uint256)'(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'requiredTxGas(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setFallbackHandler(address)'(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'setup(address[],uint256,address,bytes,address,address,uint256,address)'(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'signMessage(bytes)'(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    signedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    'signedMessages(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'swapOwner(address,address,address)'(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  NAME(overrides?: CallOverrides): Promise<string>

  'NAME()'(overrides?: CallOverrides): Promise<string>

  VERSION(overrides?: CallOverrides): Promise<string>

  'VERSION()'(overrides?: CallOverrides): Promise<string>

  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'addOwnerWithThreshold(address,uint256)'(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  approveHash(
    hashToApprove: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'approveHash(bytes32)'(
    hashToApprove: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  approvedHashes(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  'approvedHashes(address,bytes32)'(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  changeMasterCopy(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'changeMasterCopy(address)'(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'changeThreshold(uint256)'(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'disableModule(address,address)'(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  domainSeparator(overrides?: CallOverrides): Promise<string>

  'domainSeparator()'(overrides?: CallOverrides): Promise<string>

  enableModule(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'enableModule(address)'(
    module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  encodeTransactionData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  execTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)'(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'execTransactionFromModule(address,uint256,bytes,uint8)'(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'execTransactionFromModuleReturnData(address,uint256,bytes,uint8)'(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getMessageHash(message: BytesLike, overrides?: CallOverrides): Promise<string>

  'getMessageHash(bytes)'(message: BytesLike, overrides?: CallOverrides): Promise<string>

  getModules(overrides?: CallOverrides): Promise<string[]>

  'getModules()'(overrides?: CallOverrides): Promise<string[]>

  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>

  'getModulesPaginated(address,uint256)'(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>

  getOwners(overrides?: CallOverrides): Promise<string[]>

  'getOwners()'(overrides?: CallOverrides): Promise<string[]>

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>

  'getThreshold()'(overrides?: CallOverrides): Promise<BigNumber>

  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  'getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>

  isModuleEnabled(module: string, overrides?: CallOverrides): Promise<boolean>

  'isModuleEnabled(address)'(module: string, overrides?: CallOverrides): Promise<boolean>

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>

  'isOwner(address)'(owner: string, overrides?: CallOverrides): Promise<boolean>

  isValidSignature(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'isValidSignature(bytes,bytes)'(
    _data: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  nonce(overrides?: CallOverrides): Promise<BigNumber>

  'nonce()'(overrides?: CallOverrides): Promise<BigNumber>

  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'removeOwner(address,address,uint256)'(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  requiredTxGas(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'requiredTxGas(address,uint256,bytes,uint8)'(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setFallbackHandler(
    handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'setFallbackHandler(address)'(
    handler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setup(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'setup(address[],uint256,address,bytes,address,address,uint256,address)'(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  signMessage(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'signMessage(bytes)'(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  signedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  'signedMessages(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'swapOwner(address,address,address)'(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>

    'NAME()'(overrides?: CallOverrides): Promise<string>

    VERSION(overrides?: CallOverrides): Promise<string>

    'VERSION()'(overrides?: CallOverrides): Promise<string>

    addOwnerWithThreshold(owner: string, _threshold: BigNumberish, overrides?: CallOverrides): Promise<void>

    'addOwnerWithThreshold(address,uint256)'(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    approveHash(hashToApprove: BytesLike, overrides?: CallOverrides): Promise<void>

    'approveHash(bytes32)'(hashToApprove: BytesLike, overrides?: CallOverrides): Promise<void>

    approvedHashes(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'approvedHashes(address,bytes32)'(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    changeMasterCopy(_masterCopy: string, overrides?: CallOverrides): Promise<void>

    'changeMasterCopy(address)'(_masterCopy: string, overrides?: CallOverrides): Promise<void>

    changeThreshold(_threshold: BigNumberish, overrides?: CallOverrides): Promise<void>

    'changeThreshold(uint256)'(_threshold: BigNumberish, overrides?: CallOverrides): Promise<void>

    disableModule(prevModule: string, module: string, overrides?: CallOverrides): Promise<void>

    'disableModule(address,address)'(prevModule: string, module: string, overrides?: CallOverrides): Promise<void>

    domainSeparator(overrides?: CallOverrides): Promise<string>

    'domainSeparator()'(overrides?: CallOverrides): Promise<string>

    enableModule(module: string, overrides?: CallOverrides): Promise<void>

    'enableModule(address)'(module: string, overrides?: CallOverrides): Promise<void>

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    'execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'execTransactionFromModule(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>

    'execTransactionFromModuleReturnData(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>

    getMessageHash(message: BytesLike, overrides?: CallOverrides): Promise<string>

    'getMessageHash(bytes)'(message: BytesLike, overrides?: CallOverrides): Promise<string>

    getModules(overrides?: CallOverrides): Promise<string[]>

    'getModules()'(overrides?: CallOverrides): Promise<string[]>

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>

    'getModulesPaginated(address,uint256)'(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>

    getOwners(overrides?: CallOverrides): Promise<string[]>

    'getOwners()'(overrides?: CallOverrides): Promise<string[]>

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>

    'getThreshold()'(overrides?: CallOverrides): Promise<BigNumber>

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    'getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    isModuleEnabled(module: string, overrides?: CallOverrides): Promise<boolean>

    'isModuleEnabled(address)'(module: string, overrides?: CallOverrides): Promise<boolean>

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>

    'isOwner(address)'(owner: string, overrides?: CallOverrides): Promise<boolean>

    isValidSignature(_data: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<string>

    'isValidSignature(bytes,bytes)'(_data: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<string>

    nonce(overrides?: CallOverrides): Promise<BigNumber>

    'nonce()'(overrides?: CallOverrides): Promise<BigNumber>

    removeOwner(prevOwner: string, owner: string, _threshold: BigNumberish, overrides?: CallOverrides): Promise<void>

    'removeOwner(address,address,uint256)'(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'requiredTxGas(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    setFallbackHandler(handler: string, overrides?: CallOverrides): Promise<void>

    'setFallbackHandler(address)'(handler: string, overrides?: CallOverrides): Promise<void>

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>

    'setup(address[],uint256,address,bytes,address,address,uint256,address)'(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>

    signMessage(_data: BytesLike, overrides?: CallOverrides): Promise<void>

    'signMessage(bytes)'(_data: BytesLike, overrides?: CallOverrides): Promise<void>

    signedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'signedMessages(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    swapOwner(prevOwner: string, oldOwner: string, newOwner: string, overrides?: CallOverrides): Promise<void>

    'swapOwner(address,address,address)'(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    AddedOwner(owner: null): TypedEventFilter<[string], { owner: string }>

    ApproveHash(
      approvedHash: BytesLike | null,
      owner: string | null
    ): TypedEventFilter<[string, string], { approvedHash: string; owner: string }>

    ChangedMasterCopy(masterCopy: null): TypedEventFilter<[string], { masterCopy: string }>

    ChangedThreshold(threshold: null): TypedEventFilter<[BigNumber], { threshold: BigNumber }>

    DisabledModule(module: null): TypedEventFilter<[string], { module: string }>

    EnabledModule(module: null): TypedEventFilter<[string], { module: string }>

    ExecutionFailure(
      txHash: null,
      payment: null
    ): TypedEventFilter<[string, BigNumber], { txHash: string; payment: BigNumber }>

    ExecutionFromModuleFailure(module: string | null): TypedEventFilter<[string], { module: string }>

    ExecutionFromModuleSuccess(module: string | null): TypedEventFilter<[string], { module: string }>

    ExecutionSuccess(
      txHash: null,
      payment: null
    ): TypedEventFilter<[string, BigNumber], { txHash: string; payment: BigNumber }>

    RemovedOwner(owner: null): TypedEventFilter<[string], { owner: string }>

    SignMsg(msgHash: BytesLike | null): TypedEventFilter<[string], { msgHash: string }>
  }

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>

    'NAME()'(overrides?: CallOverrides): Promise<BigNumber>

    VERSION(overrides?: CallOverrides): Promise<BigNumber>

    'VERSION()'(overrides?: CallOverrides): Promise<BigNumber>

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'addOwnerWithThreshold(address,uint256)'(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'approveHash(bytes32)'(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    approvedHashes(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'approvedHashes(address,bytes32)'(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'changeMasterCopy(address)'(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'changeThreshold(uint256)'(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'disableModule(address,address)'(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>

    'domainSeparator()'(overrides?: CallOverrides): Promise<BigNumber>

    enableModule(module: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'enableModule(address)'(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'execTransactionFromModule(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'execTransactionFromModuleReturnData(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getMessageHash(message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'getMessageHash(bytes)'(message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getModules(overrides?: CallOverrides): Promise<BigNumber>

    'getModules()'(overrides?: CallOverrides): Promise<BigNumber>

    getModulesPaginated(start: string, pageSize: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    'getModulesPaginated(address,uint256)'(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getOwners(overrides?: CallOverrides): Promise<BigNumber>

    'getOwners()'(overrides?: CallOverrides): Promise<BigNumber>

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>

    'getThreshold()'(overrides?: CallOverrides): Promise<BigNumber>

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isModuleEnabled(module: string, overrides?: CallOverrides): Promise<BigNumber>

    'isModuleEnabled(address)'(module: string, overrides?: CallOverrides): Promise<BigNumber>

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    'isOwner(address)'(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'isValidSignature(bytes,bytes)'(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    nonce(overrides?: CallOverrides): Promise<BigNumber>

    'nonce()'(overrides?: CallOverrides): Promise<BigNumber>

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'removeOwner(address,address,uint256)'(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'requiredTxGas(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setFallbackHandler(handler: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'setFallbackHandler(address)'(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'setup(address[],uint256,address,bytes,address,address,uint256,address)'(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    signMessage(_data: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    'signMessage(bytes)'(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    signedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    'signedMessages(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'swapOwner(address,address,address)'(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'NAME()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'VERSION()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'addOwnerWithThreshold(address,uint256)'(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'approveHash(bytes32)'(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    approvedHashes(arg0: string, arg1: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'approvedHashes(address,bytes32)'(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    changeMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'changeMasterCopy(address)'(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'changeThreshold(uint256)'(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'disableModule(address,address)'(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'domainSeparator()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'enableModule(address)'(
      module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'execTransactionFromModule(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'execTransactionFromModuleReturnData(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getMessageHash(message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getMessageHash(bytes)'(message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getModules(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getModules()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getModulesPaginated(start: string, pageSize: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getModulesPaginated(address,uint256)'(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getOwners()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getThreshold()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isModuleEnabled(module: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isModuleEnabled(address)'(module: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isOwner(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'isOwner(address)'(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    isValidSignature(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'isValidSignature(bytes,bytes)'(
      _data: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'nonce()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'removeOwner(address,address,uint256)'(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'requiredTxGas(address,uint256,bytes,uint8)'(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'setFallbackHandler(address)'(
      handler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'setup(address[],uint256,address,bytes,address,address,uint256,address)'(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'signMessage(bytes)'(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    signedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'signedMessages(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'swapOwner(address,address,address)'(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
